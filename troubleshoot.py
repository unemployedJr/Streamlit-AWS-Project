import streamlit as st
import json
import time

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Soluci√≥n de problemas",
    layout="wide",
    page_icon="üîß"
)

# Agregar un t√≠tulo
st.title("Herramienta de Soluci√≥n de Problemas")

st.markdown("""
Esta herramienta te ayudar√° a identificar y solucionar problemas con tu aplicaci√≥n Centro de An√°lisis Documentario.
""")

# Verificar estado de la sesi√≥n
st.header("1. Estado de la Sesi√≥n")

if 'selected_documents' in st.session_state:
    st.success(f"‚úÖ selected_documents: {len(st.session_state.selected_documents)} documentos")
else:
    st.error("‚ùå selected_documents no est√° inicializado")

if 'api_results' in st.session_state:
    if st.session_state.api_results:
        st.success("‚úÖ api_results contiene datos")
        st.write("Estructura de api_results:")
        st.json(st.session_state.api_results)
    else:
        st.warning("‚ö†Ô∏è api_results est√° vac√≠o o es None")
else:
    st.error("‚ùå api_results no est√° inicializado")

if 'analysis_state' in st.session_state:
    st.success("‚úÖ analysis_state est√° inicializado")
    st.write("Estado actual:", st.session_state.analysis_state)
else:
    st.error("‚ùå analysis_state no est√° inicializado")

# Probar la API
st.header("2. Prueba de API")

from utils.rest_api import initialize_api_client, load_available_documents, analyze_selected_documents
from utils.session import initialize_session_state

# Inicializar estado si no existe
if 'api_client' not in st.session_state:
    initialize_session_state()
    initialize_api_client()

# Mostrar documentos disponibles
if st.button("Cargar Documentos"):
    with st.spinner("Cargando documentos..."):
        docs = load_available_documents()
        st.write(f"Se cargaron {len(docs)} documentos")
        st.dataframe(docs)

# Simular an√°lisis con datos de prueba
st.subheader("Simular An√°lisis")

if st.button("Simular An√°lisis con Datos de Prueba"):
    # Crear datos de prueba
    test_results = {
        "introduction": "Esta es una introducci√≥n de prueba.",
        "contexto": "Este es un contexto de prueba.",
        "resumenes_ejecutivos": "Estos son res√∫menes ejecutivos de prueba.",
        "analisis_detallado": "Este es un an√°lisis detallado de prueba.",
        "comparacion_documentos": "Esta es una comparaci√≥n de documentos de prueba.",
        "conclusion": "Esta es una conclusi√≥n de prueba."
    }
    
    # Guardar en estado de sesi√≥n
    st.session_state.api_results = test_results
    st.session_state.analysis_state = {
        "status": "complete",
        "progress": 100,
        "message": "An√°lisis completado (simulaci√≥n)",
        "analysis_id": None
    }
    
    st.success("Datos de prueba guardados en el estado de la sesi√≥n")
    
    # Mostrar datos
    from components.analysis_cards import render_analysis_cards
    render_analysis_cards(test_results)

# Mostrar informaci√≥n t√©cnica
st.header("3. Informaci√≥n T√©cnica")

# Versiones
import streamlit as st_version
st.write(f"Versi√≥n de Streamlit: {st_version.__version__}")

# Estructura de directorios
st.subheader("Estructura de Directorios")
import os
current_dir = os.getcwd()
st.write(f"Directorio actual: {current_dir}")

# Listar archivos en el directorio actual
files = os.listdir(current_dir)
st.write("Archivos en el directorio ra√≠z:")
st.write(files)

# Listar archivos en components y utils
if os.path.exists("components"):
    st.write("Archivos en components:")
    st.write(os.listdir("components"))

if os.path.exists("utils"):
    st.write("Archivos en utils:")
    st.write(os.listdir("utils"))

# Bot√≥n para limpiar el estado de la sesi√≥n
st.header("4. Herramientas de Mantenimiento")

if st.button("Limpiar Estado de Sesi√≥n"):
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    st.success("Estado de sesi√≥n limpiado")
    st.rerun()